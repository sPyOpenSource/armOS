# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5---3rd-party-Hardware-specification

name=SparkFun PSoC Development Boards
version=1.6.3

compiler.path={runtime.ide.path}/hardware/tools/gcc-arm-none-eabi-4.8.3-2014q1/bin/
compiler.c.cmd=arm-none-eabi-gcc
compiler.c.flags=-D NDEBUG -Wall -ffunction-sections -g -c -Os -mcpu=cortex-m3 -mthumb -Wno-main

compiler.c.elf.cmd=arm-none-eabi-gcc
compiler.c.elf.flags=

compiler.S.flags=-mcpu=cortex-m3 -mthumb -g
compiler.S.cmd=arm-none-eabi-as

compiler.cpp.cmd=arm-none-eabi-gcc
compiler.cpp.flags=-x c++ -D NDEBUG -Wall -ffunction-sections -g -c -Os -mcpu=cortex-m3 -mthumb -Wno-main -Wno-exceptions

compiler.ar.cmd=arm-none-eabi-ar
compiler.ar.flags=rcs

compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0

compiler.elf2hex.flags=-O ihex -R .cyeeprom -R .cyconfigecc -R .cycustnvl -R .cywolatch -R .cyflashprotect -R .cybootloader -R .cyloadablemeta -R .cyloadermeta -R .cymeta 
#compiler.elf2hex.flags=-O ihex 
compiler.elf2hex.cmd=arm-none-eabi-objcopy

compiler.ldflags=

compiler.size.cmd=arm-none-eabi-size
compiler.define=-DARDUINO=

# this can be overriden in boards.txt
build.extra_flags=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

#local_libraries={runtime.hardware.path}/psoc/Libraries/

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}"  {compiler.c.flags}  {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags}  {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Assemble .S files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{build.path}/{archive_file}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" -Wl,--start-group -o "{build.path}/{build.project_name}.elf" {object_files} "{build.variant.path}/Uno_blocks.a" "{build.variant.path}/{build.variant_system_lib}" "{build.path}/core/core.a"  -mthumb -march=armv7-m -mfix-cortex-m3-ldrd -lm "-Wl,-Map,{build.path}/{build.project_name}.map" "-T{runtime.hardware.path}/psoc/cores/arduino/cm3gcc.ld" -g "-u _printf_float" ""  -Wl,--gc-sections -Wl,--end-group -lstdc++ 
recipe.objcopy.eep.pattern=

## Create hex
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=\.text\s+([0-9]+).*

## Upload
tools.avrdude.cmd.path={runtime.ide.path}/hardware/tools/avr/bin
tools.avrdude.conf.path={runtime.hardware.path}/psoc/avrdude.conf
tools.avrdude.cmd=avrdude
tools.avrdude.upload.params.verbose=
tools.avrdude.upload.params.quiet=
tools.avrdude.upload.pattern="{cmd.path}/{cmd}" -ppsoc -C "{conf.path}" -v -c {upload.protocol} -P{serial.port} -D "-Uflash:w:{build.path}/{build.project_name}.hex:i"

